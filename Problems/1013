1013. Partition Array Into Three Parts With Equal Sum
Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

---------------------------

class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& A) {
        int sum = 0, partsum = 0, success = 0;
        for (auto x: A)
            sum += x;
        
        for(int i = 0; i < A.size(); i++){
            partsum += A[i];
            
            if(partsum == sum/3){
                success++;
                partsum = 0;
            }
        }
        
        if(success == 3)
            return true;
        else
            return false;
            
    }
};
