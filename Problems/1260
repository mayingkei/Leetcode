1260. Shift 2D Grid
Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.

----------------------------------

class Solution {
public:
    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {
        vector<vector<int>> res(grid.size(), vector<int>(grid[0].size()));
        vector<int> num;
        
        for(int i = 0; i < grid.size();i++){
            for(int j = 0; j < grid[0].size(); j++){
                num. push_back(grid[i][j]);
            }
        }
        
        if(k > grid.size()*grid[0].size())
            k = k%(grid.size()*grid[0].size());
        
        int a = 0;
        rotate(num.begin(), num.begin() + num.size() - k, num.end());
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size();j++){
                res[i][j] = num[a];
                a++;
            }
        }
        
        return res;
    }
};
